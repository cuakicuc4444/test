
// module counter_offset (
//     input clk,                   // TÃ­n hiá»‡u xung nhá»‹p Ä‘á»“ng bá»™
//     input plus_1,                // TÃ­n hiá»‡u Ä‘iï¿½?u khiá»ƒn tÄƒng
//     input load_temp,             // TÃ­n hiá»‡u cho phÃ©p ghi giÃ¡ trá»‹ vÃ o temp_reg_internal
//     input [31:0] temp_reg,       // ï¿½?áº§u vÃ o thanh ghi táº¡m chá»©a giÃ¡ trá»‹ so sÃ¡nh
//     output reg [31:0] count      // ï¿½?áº§u ra cá»§a bá»™ Ä‘áº¿m
// );

//     // Biáº¿n táº¡m bÃªn trong module, dÃ¹ng Ä‘á»ƒ lÆ°u giÃ¡ trá»‹ tá»« temp_reg
//     reg [31:0] temp_reg_internal;

//     // Biáº¿n tráº¡ng thÃ¡i Ä‘á»ƒ kiá»ƒm soÃ¡t láº§n xuáº¥t giÃ¡ trá»‹ `0` trÆ°á»›c khi tÄƒng
//     reg reset_state;

//     // Khá»Ÿi táº¡o giÃ¡ trá»‹ ban Ä‘áº§u
//     initial begin
//         count = 32'b0;
//         temp_reg_internal = 32'b0;
//         reset_state = 1'b0;
//     end

//     // QuÃ¡ trÃ¬nh cáº­p nháº­t temp_reg_internal khi load_temp Ä‘Æ°á»£c kÃ­ch hoáº¡t
//     always @(posedge clk) begin
//         if (load_temp) begin
//             // Ghi giÃ¡ trá»‹ tá»« temp_reg vÃ o biáº¿n táº¡m bÃªn trong temp_reg_internal
//             temp_reg_internal <= temp_reg;
//         end else begin
//             temp_reg_internal <= temp_reg_internal;
//         end
//     end

//     // QuÃ¡ trÃ¬nh Ä‘iï¿½?u khiá»ƒn bá»™ Ä‘áº¿m
//     always @(posedge clk) begin
//         if (plus_1) begin
//             if (!reset_state) begin
//                 // Khi reset_state chÆ°a Ä‘Æ°á»£c kÃ­ch hoáº¡t, xuáº¥t giÃ¡ trá»‹ 0 vÃ  chuyá»ƒn tráº¡ng thÃ¡i
//                 count <= 32'b0;
//                 reset_state <= 1'b1;
//             end else if (count + 1 >= temp_reg_internal) begin
//                 // Reset count vï¿½? 0 náº¿u Ä‘áº¡t giÃ¡ trá»‹ temp_reg_internal
//                 count <= 32'b0;
//             end else begin
//                 // TÄƒng giÃ¡ trá»‹ count thÃªm 1
//                 count <= count + 1;
//             end
//         end else begin
//             // Giá»¯ nguyÃªn giÃ¡ trá»‹ cá»§a count vÃ  reset tráº¡ng thÃ¡i khi khÃ´ng cÃ³ plus_1
//             count <= count;
//             reset_state <= 1'b0;
//         end
//     end

// endmodule


 module counter_offset (
     input clk,                   // TÃ­n hiá»‡u xung nhá»‹p Ä‘á»“ng bá»™
     input reset,                // TÃ­n hiá»‡u reset
     input plus_1,               // TÃ­n hiá»‡u Ä‘iá»?u khiá»ƒn tÄƒng
     input load_temp,            // TÃ­n hiá»‡u cho phÃ©p ghi giÃ¡ trá»‹ vÃ o temp_reg_internal
     input [31:0] temp_reg,      // Ä?áº§u vÃ o thanh ghi táº¡m chá»©a giÃ¡ trá»‹ so sÃ¡nh
     output reg [31:0] count     // Ä?áº§u ra cá»§a bá»™ Ä‘áº¿m
 );

     // Biáº¿n táº¡m bÃªn trong module, dÃ¹ng Ä‘á»ƒ lÆ°u giÃ¡ trá»‹ tá»« temp_reg
     reg [31:0] temp_reg_internal;

     // Khá»Ÿi táº¡o giÃ¡ trá»‹ ban Ä‘áº§u
     initial begin
         count = 32'b0;
         temp_reg_internal = 32'b0;
     end

     //QuÃ¡ trÃ¬nh cáº­p nháº­t temp_reg_in ternal khi load_temp Ä‘Æ°á»£c kÃ­ch hoáº¡t
     always @(posedge clk or negedge reset) begin
     if (!reset) begin
             temp_reg_internal <= 32'b0; // Reset giÃ¡ trá»‹ biáº¿n táº¡m
         end else if (load_temp) begin
             temp_reg_internal <= temp_reg; // Ghi giÃ¡ trá»‹ tá»« temp_reg vÃ o biáº¿n táº¡m
         end else begin
             temp_reg_internal <= temp_reg_internal; // Giá»¯ nguyÃªn giÃ¡ trá»‹ náº¿u khÃ´ng cÃ³ sá»± kiá»‡n
         end
     end


     // QuÃ¡ trÃ¬nh Ä‘iá»?u khiá»ƒn bá»™ Ä‘áº¿m
     always @(posedge clk or negedge reset) begin
     if (!reset) begin
             count <= 32'b0; // Reset giÃ¡ trá»‹ bá»™ Ä‘áº¿m
         end else if (plus_1) begin
             if (count + 1 >= temp_reg_internal) begin
                 count <= 32'b0; // Reset count vá»? 0 náº¿u Ä‘áº¡t giÃ¡ trá»‹ temp_reg_internal
             end else begin
                 count <= count + 1; // TÄƒng giÃ¡ trá»‹ count thÃªm 1
             end
         end else begin
             count <= 0; // Giá»¯ nguyÃªn giÃ¡ trá»‹ náº¿u khÃ´ng cÃ³ sá»± kiá»‡n
         end
     end

 endmodule

//module counter_offset (
//    input clk,                   // TÃ­n hiá»‡u xung nhá»‹p Ä‘á»“ng bá»™
//    input reset,                // TÃ­n hiá»‡u reset
//    input plus_1,               // TÃ­n hiá»‡u Ä‘iá»?u khiá»ƒn tÄƒng
//    input load_temp,            // TÃ­n hiá»‡u cho phÃ©p ghi giÃ¡ trá»‹ vÃ o temp_reg_internal
//    input [31:0] temp_reg,      // Ä?áº§u vÃ o thanh ghi táº¡m chá»©a giÃ¡ trá»‹ so sÃ¡nh
//    output reg [31:0] count     // Ä?áº§u ra cá»§a bá»™ Ä‘áº¿m
//);


//    // cÃ¡c biáº¿n trung gian 
//    wire [31:0] temp_internal_w, count_w;
//    reg  [31:0] temp_internal_r;
    
//    assign temp_internal_w = temp_internal_r;
//    assign count_w = count;

//    always @(posedge clk or negedge reset) begin 
//        if(~reset) begin 
//            temp_internal_r <= 32'd0;
//            count           <= 32'd0;
//        end else begin 
//            if(plus_1)begin 
//                if (count_w + 32'd1 >= temp_internal_w) begin 
//                    count <= 32'd0;
//                end else begin 
//                    count <= count + 32'd1;
//                end 
//            end else begin 
//                temp_internal_r <= 32'd0;
//                count           <= 32'd0;
//            end 
//        end
//    end 

//    always @(load_temp) begin 
//        case(load_temp) 
//            1'b1: begin 
//               temp_internal_r = temp_reg; 
//            end 
//            default: begin 
//               temp_internal_r = temp_internal_w; 
//            end 
//        endcase
//    end
//    endmodule